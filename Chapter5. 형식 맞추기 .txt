Chapter5. 형식 맞추기
 1). 형식을 맞추는 목적 
 - 코드 형식은 매우 중요하지만 융통성 없이 맹목적으로 따르면 안된다.
 - 구현한 코드의 가독성은 	코드 품질에 지대한 영향을 끼친다. 
 
 2). 적절한 행 길이를 유지하라
 - 일반적으로 큰 파일보다 작은 파일이 이해하기 쉽다. 
 - 소스도 신문 기사처럼 위에서 아래로 읽어 갈 수 있도록 작성해라.
 - 각각의 개념은 빈 행으로 분리해라.
 - 줄바굼은 개념을 분리하고 세로 밀집도는 연관성을 의미한다.
 - 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다. 코드가 '한눈'에 들어오도록 해야 한다.
 - 서로 밀접한 개념은 세로로 둬야한다. 그렇지 않으면 파일을 읽는 사람은 계속 찾아다녀 효율이 떨어진다.
 - 변수는 사용하는 위치에 최대한 가까이 선언한다. 
 - 지역 변수는 각 함수 맨 처음에 선언한다. 
 - 인스턴스 변수는 클래스 맨 처음에 선언하고 변수간에 세로로 거리를 두지 않는다. 
 - 누구나 알고 있는 위치에 인스턴스 변수가 모아져 있어야 한다. 
 - 한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치해야 한다. 
 - 서로 개념적인 친화도가 높은, 개념적 유사성이 있는 코드들은 가까이에 배치한다.
 - 일반적인 함수 호출 종속성은 아래 방향으로 유지한다-> 호출되는 함수를 호출하는 함수보다 나중에 배치한다.
 - 한 행의 가로 길이는 짧을 수록 바람직하다.(120자 정도의 행 길이 제한을 권고)
 - 가로로는 공백을 사용해 밀접한 갠며과 느슨한 개념을 표현한다.
 - 연산자 우선순위를 강조, 할당 연산자를 강조하기 위해서도 공백을 사용한다.
 - 선언부가 너무 길다면 클래스를 쪼개야 한다. 
 - 코드에서 들여쓰기를 하는 이유는 범위로 이뤄진 계층을 표현하기 위해 사용한다.
 - 들여쓰기 하는 정도는 계층에서 코드가 자리잡은 수준에 비례한다. 
 - 클래스 내 메서드는 클래스보다 한 수준 들여쓰고, 메서드는 클래스보다 한 수준 들여 쓰고 메서드 코드는 메서드 선언보다 한 수준 들여쓰고 블록코드는 블록을 포함하는 코드보다 한 수준 들여쓴다.
 - 짧은 if문, 짧은 함수라고 할 지라도 범위를 무시하는 코드 작성은 피해야 한다. 
 - 내용이 비어있는 반복문 구조는 피해야 한다. 피하지 못하는 경우는 빈 블록을 올바르게 들여쓰고 괄호로 감싼다.
 
 3). 팀 규칙
 - 팀에 속한다면 팀 규칙을 가장 선호해야 한다. 
 - 팀은 한 가지 규칙에 합의해야 하고 모든 팀원은 그 규칙을 따라야 한다. 
 
 
 
 
 