Chapter2. 의미 있는 이름 

1). 의도를 분명히 밝혀라 
 - 이름은 의도가 분명해야 하며 더 나은 이름이 떠오른다면 개선해야 한다. 
 - 의도가 분명한 이름을 사용하면 코드 이해와 변경이 쉬워진다. 
 - 코드의 단순성은 변하지 않더라도 이름에 의도를 분명히 하면 코드는 명확해진다.
 
2). 그릇된 정보는 피하라 
 - 프로그래머는 코드에 그릇된 단서를 남겨서는 안되며 통상적으로 쓰이는 단어를 다른 의미로 사용해서도 안된다.
 - 서로 흡사한 이름을 사용하지 않도록 주의한다.
 
3). 의미 있게 구분하라
 - 이름에는 정보를 제공해야 하고 읽는 사람이 차이를 알도록 해야 한다.
 
4). 발음하기 쉬운 이름을 사용하라
 - 발음하기 쉬운 이름을 택해라.

5). 검색하기 쉬운 이름을 사용하라
 - 이름 길이는 범위 크기에 비례해야 하고 유용하지 않더라도 검색하기 쉬운 이름을 써야한다.
 
6). 인코딩을 피하라
 - 이름에 인코딩할 정보는 아주 많다. 유형이나 범위 정보까지 인코딩에 넣으면 안된다. 
 
7). 자신의 기억력을 자랑하지 마라
 - 문자 하나만 사용하는 변수 이름은 절대 안된다.
 - 코드를 읽으면서 변수 이름을 자신이 아는 이름으로 변환해야 하는 이름은 바람직하지 못하다. 
 - 좋은 프로그래머는 남들이 이해할 수 있는 코드를 내놓는다.
 
8). 클래스 이름 
 - 클래스 이름과 객체 이름은 명사나 명사구가 적합하다.
 ex)
 Customer, WikiPage, Account
 - Manager, Processor, Data 같은 단어는 피하며 동사는 사용하지 않는다. 

9). 메서드 이름 
 - 메서드 이름은 동사나 동사구가 적합하다. 
 - postPayment, deletePage 등이 좋은 예며 접근자, 변경자, 조건자는 javabean 표준에 따라 앞에 get,set,is를 붙인다.
 ex)
 string name = empleyee.getName();
 customer.setName("nice");
 if(paycheck.isPosted())
 - 생성자를 중복정의 할 때는 정적 팩토리 메서드를 사용하며 메서드는 인수를 설명하는 이름을 사용한다.
 ex) 
 Complex fulcrumPoint = Complex.FromRealNumber(1.1); 보다는 
 Complex fulcrumPoint - new Complex(1.1); 이 좋다. 
 - 생성자 사용을 제한하려면 해당 생성자를 private로 선언해라.
 
10). 기발한 이름은 피하라
 - 재미나거나 기발한 이름, 특정 문화에서만 사용하는 농담 보다는 의도를 분명하고 솔직하게 표현해라.

11). 한 개념에 한 단어를 사용하라 
 - 추상적인 개념 하나에 단어 하나를 선택해 이를 고수한다. 
 - 메서드 이름은 독자적이고 일관적이어야 한다. 그래야 주석을 보지 않고도 프로그래머가 올바른 메서드를 선택한다. 
ex) 똑같은 메서드를 클래스마다 fetch,retrieve,get으로 각각 부르면 혼란을 야기한다
 - 일관성 있는 어휘로 코드를 작성해야 한다. 
ex) 동일 코드 기반에 controller,manager,driver 를 섞어 쓴다면 혼란을 야기할 것이다

12). 말장난을 하지 마라 
 - 한 단어를 두 가지 목적으로 사용하지 마라. 
 - 프로그래머는 코드를 최대한 이해하기 쉽게 짜야 하며 대충 훑어봐도 이해할 코드 작성을 목표로 해야 한다. 
 
13). 해법 영역에서 가져온 이름을 사용하라 
 - 프로그래머에게 익숙한 기술 개념을 사용하여 기술 이름을 선택해야 한다. 

14). 문제 영역에서 가져온 이름을 사용하라 
 - 적합한 기술 개념이 없다면 문제 영역에서 가져온 이름을 사용해라. 

15). 의미 있는 맥락을 추가하라 
 - 이름에 의미를 부여해야 한다. 그렇지 못한다면 마지막 수단으로 접두어를 붙인다.
ex) 
firstName, lastName, street, state로 변수 명을 사용하기 보다는 
해당 변수가 주소라는 사실을 알 수 있도록 
addrFirstName, addrLastName, addrStreet, addrState 라고 쓰자
- 함수를 끝까지 읽고 변수에 대한 맥락을 추측하게 하지말고 맥락을 개선하여 명확하게 보이도록 한다. 
- 공통된 변수는 클래스를 만들어서 맥락을 추가하고 함수는 기능별로 쪼개어 알고리즘을 명확하게 하도록 한다. 
ex)
본 책 35~36 page 예시 참고

16). 불필요한 맥락을 없애라
 - 일반적으로 짧은 이름이 긴 이름보다 좋지만 의미가 분명한 경우에 한해서다. 
 - 이름에 불필요한 맥락을 추가하지 않도록 주의한다. 

17). 결론
 - 좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고 문화적인 배경이 같아야 한다. 
 - 이름을 개선하면 단기적인 효과는 물론 장기적인 이익이 있으며 코드를 개선하려는 노력을 중단해서는 안된다. 

 
 
 