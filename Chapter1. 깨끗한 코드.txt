Chapter1. 깨끗한 코드

1). 코드가 존재하리라
 - 코드를 자동으로 생성하는 시대가 온다고 해도 어느 수준의 이르면 코드의 도움 없이 요구사항을 상세하게 표현하고 추상화하기 불가능하다.
 - 기계가 실행할 정도로 상세하게 요구사항을 명시하는 작업이 프로그래밍이고 명시한 결과가 코드다.
 - 코드는 요구사항을 표현하는 언어임으로 어느 순간이든 정밀한 표현이 필요하고 이를 없앨 방법은 없다.
 
2). 나쁜 코드
 - 우리는 오랫동안 나쁜 코드에 시달려왔다. 나쁜 코드로 인하여 망해버린 회사는 그 동안 계속 있었다.
 - 나쁜 코드로 인하여 고생하는 것은 고행(wading)이라고 표현 할 정도로 우리는 고생한다. 우리 모두는 자신이 짠 쓰레기 코드를 보며 나중에 수정하겠다고 하지만 결코 수정하지 않는다.

3). 나쁜 코드로 치르는 대가
 - 나쁜 코드는 개발 속도를 크게 떨어뜨리며 쌓일수록 팀 생산성은 떨어진다.
 
4). 원대한 재설계의 꿈
 - 나쁜 코드로 인해 떨어진 팀 생산성으로 재설계를 한다고 하더라도 기존에 쌓인 원래 시스템을 대체하기 쉽지 않다.
 
5). 태도
 - 나쁜 코드가 된 이유에 대해서 온갖 이유를 들지만 전적으로 프로그래머 잘못이다. 
 - 상황이 어떻게 되든 좋은 코드를 사수하는 것은 프로그래머들의 책임이다.
 - 나쁜 코드의 위험을 이해하지 못하는 관리자 말을 따르는 것은 전문가답지 못하다.
 
6). 원초적 난제
 - 기한을 맞추기 위해서 나쁜 코드를 빠르게 양산한다는 것은 잘못된 것이며 결과적으로 기한을 맞추는 유일한 방법은 언제나 코드를 최대한 깨끗하게 유지하는 습관이다.

7). 깨끗한 코드라는 예술?
 - 깨끗한 코드와 나쁜 코드를 구분할 줄 안다고 깨끗한 코드를 작성할 줄 아는 것이 아니다.
 - 깨끗한 코드를 작성하려면 코드감각이 있어야 하고 코드감각이 없더라도 프로그래머는 나쁜 모듈을 알아본다.
 - 코드는 논리가 간단하고 의존성을 줄여야하며 철저한 오류처리를 해야한다고 C# 창시자 비야네는 주장한다.
 - 나쁜 코드는 너무 많은 일을 하려하다 의도가 섞이며 목적이 흐려진다. 깨끗한 코드는 한가지에 집중한다.
 - 깨끗한 코드는 가독성도 좋아야 하며 작성자가 아닌 사람도 읽기 쉽고 고치기 쉬워야 한다. 
 - 깨끗한 코드는 시간을 들여 깔끔하고 단정하게 정리하고 세세한 사항까지 신경쓴 코드다.
 - 중복을 피하고 한 기능만 수행하며 작게 추상화하라.
 - 코드를 독해하면서 고민하게 하지 않아야 한다. 
 - 언어가 단순하게 보이도록 만드는 책임은 언어 자체의 문제가 아니라 프로그래머에게 있다. 
