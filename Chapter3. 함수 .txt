Chapter3. 함수

1) 작게 만들어라!
 - 함수는 최대한 작게 만들어야 한다.

2) 한 가지만 해라!
 - 함수는 한 가지 기능만 하도록 해야 한다.
 
3) 함수 당 추상화 수준은 하나로!
 # 추상화: 복잡한 자료, 모듈, 시스템 등으로부터 핵심적인 개념 또는 기능을 간추려 내는 것
 # '추상화의 수준이 높다' 라는 것은 디테일을 많이 숨김
 # '추상화의 수준이 낮다' 라는 것은 디테일이 많이 드러냄
 - 함수가 한 가지 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다.
 - 내려가기 규칙: 위에서 아래로 프로그램을 읽으면 함수 추상화 수준이 한 번에 한 단계씩 낮아지는 것
 - 코드는 위에서 아래로 이야기처럼 읽히는 것이 좋다. 
 - 위에서 아래로 문단을 읽는 것 처럼 코드를 구현하면 추상화 수준을 일관되게 유지하기가 쉬워진다.
 
4) Switch 문
 - 스위치 문 또한 최대한 작게 만들어야 한다. 
 - 동일한 구조가 생길 수 있는 스위치 문을 만들때는 스위치 문 자체를 추상 팩토리에 넣고 최대한 다른 코드에 노출시키지 마라.
 
5) 서술적인 이름을 사용하라!
 - 함수 이름에 기능을 짐작할 수 있도록 작고 단순하면서 서술적인 이름을 사용하라.
 - 이름을 붙일 때는 일관성이 있어야 한다. 
 ex) 
 includeSetupAndTeardownPages, includeSetupPage, includeSetupPages
 
6) 함수 인수
 - 함수에서 인수는 최대한 적게 사용 해라.
 - 함수의 인수가 많을 수록 코드를 읽는 사람, 테스트 과정에 대한 어려움이 커진다.
 - 변환 함수에서 출력 인수를 사용하는 경우를 피해라
 ex)
 void includeSetupPageInto(StringBuffer pageText)-> 이러한 경우는 피해라 
 - 플래그 인수 (ex: boolean) 인수는 최대한 피해라.
 - 이항 함수를 불가피하게 사용하는 경우가 아니라면 최대한 단항함수를 사용하도록 해야한다.
 - 삼항 함수를 만들때는 순서, 주춤,무시로 발생하는 문제가 많으니 신중히 고려해라
 - 인수가 2~3개 필요한 경우는 일부를 독자적인 클래스 변수로 선언할 수 있으면 선언해라
 ex) 
 Circle makeCircle(double x, double y, double radius)를 
 Circle makeCircle(Point center, double radius) 처럼 객체를 생성해 인수를 줄여라.
 - 함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 좋은 함수 이름이 필수다.
 - 단항 함수는 함수와 인수가 동사/명사 쌍을 이루어야 한다.
 ex)
 write(name)
 - 함수 이름에 인수 이름을 넣어라. 그러면 인수 순서를 기억할 필요가 없어진다.
 ex)
 assertEquals 보다는 assertExpectedEqualsActual(expected,actual) 
 
 7) 부수 효과를 일으키지 마라!
 - 함수 속에 부수적인 다른 기능을 넣으며 안된다.
 - 부수 효과는 시간적인 결합을 초래하고 시간적인 결합은 혼란을 야기한다. 함수는 하나에 한 가지 기능만 해야 한다.
 # 입력인수 : 	함수에게 전달하는 인수.
 # 출력인수 : 함수에서 결과를 돌려 받는 인수, 참조로 전달되는 인수.
 - 일반적으로 출력인수는 피해라. 함수에서 상태를 변경해야 한다면 함수가 속한 객체 상태를 변경하는 방식을 택한다
 ex) 
 void appendFooter(StringBuffer report)를 만들어 appendFooter(s)로 출력인수 s를 사용하기 보다는
 report.appendFooter()
 
 8) 명령과 조회를 분리하라!
 - 함수는 명령을 수행하거나 명령에 답하거나 둘 중에 하나의 기능만 있어야 한다
 ex) 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나의 기능만 수행해야 한다.
 
 9) 오류 코드보다 예외를 사용하라!
 - 오류 코드 대신 예외를 사용하면 오류 처리 코드가 원래 코드에서 분리되어 깔끔해진다.
 - try/catch 블록을 별도의 함수로 만들어서 사용하라. 
 - 함수 내에서 try/catch로 에러를 처리하는 것이 아니라 예외를 처리하지 않고 정상 동작과 오류 처리동작을 분리하라
 ex)
 본 책의 58~59 page 예제 확인 
 - 함수는 한 가지 작업만 해야 한다. 오류처리도 한 가지 작업에 속함으로 오류 처리하는 함수는 오류만 처리하도록 하는 것이 마땅하다.
 ex)
 Java인 경우 함수 내부에서 try/catch로 예외를 처리 하지 말고 throws 예외를 던져서 호출한 쪽에서 오류만 따로 처리하도록 처리한다.
 
 10) 반복하지 마라!
 - 코드 중복을 줄여서 가독성을 높여라.
 - 지금까지 일어난 혁신은 소스 코드에서 중복을 제거하려는 지속적인 노력이다.
 
 11) 구조적 프로그래밍
 - 함수가 크다면 return 문은 하나로 사용하고 루프 안에서 break나 continue를 사용해서는 안된다.
 - 함수가 작다면 return, break, continue를 여러 차례 사용해도 괜찮다. 작은 함수에서는 오히려 의도 표현이 쉬워진다.
 - go to는 작은함수에서 피해야한다.
 
 12) 함수를 어떻게 짜죠?
 - 함수는 처음부터 완벽하게 짤 수는 없으며 반복적인 수정과 테스트로 깨끗한 코드를 사용하는 함수를 짠다.
 ex)
 처음에 함수를 짜고 나서 코드를 다듬고 이름을 바꾸고 중복을 제거, 클래스를 쪼개고, 테스트를 하는 작업을 반복하여 완성한다.
 
 13) 결론
 - 함수는 분명하고 정확한 언어로 깔끔하게 같이 맞아 떨어져야 이야기를 풀어나가기 쉬워진다.
 

 
 
 
 
 
 
 
 
 
 
 
 