Chapter4. 주석
 - 주석을 무턱대고 사용하기 보다는 코드로 의도를 표현할 방법을 먼저 고민한다.
 - 부정확한 주석은 없는 주석보다 나쁘다.
 - 주석은 가능한 줄이도록 꾸준히 노력해야 한다.
 
 1). 주석은 나쁜 코드를 보완하지 못한다.
 - 코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다.
 - 표현력이 풍부하고 깔끔하며 주석이 거의 없는 코드가 주석이 많이 달린 복잡한 코드보다 좋다.
 
 2). 코드로 의도를 표현하라!
 - 코드로 대다수의 의도를 충분히 표현할 수 있다.
 - 표현하려는 의도가 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현하라.
 
 3). 좋은 주석
 - 법적인 주석: 회사가 정립한 구현 표준에 맞춰 법적인 이유로 인하여 넣는 주석
 - 정보를 제공하는 주석: 기본적인 정보를 제공하는 주석
 ex) 
 // 테스트 중인 Responder 인스턴스를 반환
 protected abstract Responder responderInstance();
 - 의도를 설명하는 주석: 구현을 이해하게 해주며 결정에 깔린 의도까지 설명하는 주석
 - 의미를 명료하게 밝히는 주석: 모호한 인수나 반환값을 밝히는 주석 
 - 결과를 경고하는 주석: 다른 프로그래머들에게 결과를 경고할 목적으로 사용하는 주석
 - TODO 주석: 앞으로 해야 할 일을 명시하는 주석
 - 중요성을 강조하는 주석: 대수롭지 않다고 여겨질 무언가에 대해 중요성을 강조하는 주석
 
 4). 나쁜 주석
 - 주절거리는 주석: 특별한 이유없이 의무감으로 또는 프로세스에서 하라고 하니 적어놓은 주석, 이해가 안 되어 다른 모듈까지 뒤져야 하는 주석은 낭비이다.
 - 같은 이야기를 중복하는 주석
 - 오해할 여지가 있는 주석
 - 의무적으로 다는 주석
 - 이력을 기록하는 주석 
 - 있으나 마나 한 주석: 너무 당연한 사실을 언급하는 주석, 함수나 변수로 표현할 수 있다면 주석을 달지 말아야 한다.
 - 위치를 표시하는 주석 
 - 닫는 괄호에 다는 주석 
 - 공로를 돌리거나 저자를 표시하는 주석 
 - 주석으로 처리한 코드 
 - HTML 주석 
 - 전역 정보: 주석을 달아야 한다면 근처에 있는 코드만 기술해야 한다. 
 - 너무 많은 정보: 주석에 흥미로운 역사나 관련 없는 정보는 기입하지 말아야 한다. 
 - 모호한 관계: 주석과 주석이 설명하는 코드는 둘 사이가 명백해야 한다. 
 - 함수 헤더: 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 좋다. 
 - 비공개 코드에서 Javadocs는 쓸모가 없다.
 